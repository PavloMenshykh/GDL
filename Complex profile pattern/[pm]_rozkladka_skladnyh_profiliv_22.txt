!!!GETTING COMPLEX PROFILE INFO

_nComponents = 0

n = REQUEST ("Profile_components", prof1, _nComponents)

if n then

	! --- Get the profile components geometry ---

	dim _profileGeometryRawData[]
	n = REQUEST ("Profile_default_geometry", prof1, _profileGeometryRawData)	 

	! --- calculate indices to split up the original data into components ---

	dim _idxStartPoints[]
	dim _idxEndPoints[]
	_idxStartPoints[1] = _nComponents + 1
	_numPropertybyNodes = 2
	for _i = 2 to _nComponents
		_numCompNodes = _profileGeometryRawData[_i - 1]
		_idxStartPoints[_i] = _idxStartPoints[_i - 1] + _numCompNodes * _numPropertybyNodes
		_idxEndPoints[_i-1] = _idxStartPoints[_i] - 1
	next _i
	_idxEndPoints[_nComponents] = vardim1(_profileGeometryRawData)

endif

_nComponents2 = 0

n2 = REQUEST ("Profile_components", prof2, _nComponents2)

if n2 then

	! --- Get the profile components geometry ---

	dim _profileGeometryRawData2[]
	n2 = REQUEST ("Profile_default_geometry", prof2, _profileGeometryRawData2)	 

	! --- calculate indices to split up the original data into components ---

	dim _idxStartPoints2[]
	dim _idxEndPoints2[]
	_idxStartPoints2[1] = _nComponents2 + 1
	_numPropertybyNodes2 = 2
	for _i2 = 2 to _nComponents2
		_numCompNodes2 = _profileGeometryRawData2[_i - 1]
		_idxStartPoints2[_i2] = _idxStartPoints2[_i2 - 1] + _numCompNodes2 * _numPropertybyNodes2
		_idxEndPoints2[_i2-1] = _idxStartPoints2[_i2] - 1
	next _i2
	_idxEndPoints2[_nComponents2] = vardim1(_profileGeometryRawData2)

endif


n = REQUEST ("Profile_default_boundingbox", prof1, xmin1, ymin1, xmax1, ymax1)

n2 = REQUEST ("Profile_default_boundingbox", prof2, xmin2, ymin2, xmax2, ymax2)

!!!=============================
!VALUES

width1 = (xmax1 - xmin1)
width2 = (xmax2 - xmin2)

!cncn - count of type 2 profiles
!len1 - len of prof 1
!len2 - len of prof 2
!ol1 - nakladannya porfilyu na profil
!ol2 - nakladannya porfilyu na profil
!vol1 - vert vidstup v profil 1
!vol2 - vert vidstup v profil 2

BUILDING_MATERIAL bmat

pver1 = INT((ZZYZX/(len1+vol1))-(ZZYZX MOD (len1+vol1))+1)
pver2 = INT((ZZYZX/(len2+vol2))-(ZZYZX MOD (len2+vol2))+1)

if cncn > 0 then
	phor1 = INT(A/(width1-ol1+(cncn*(width2-ol2))))
else
	phor1 = INT(A/(width1-ol1))
endif

!phor1 = INT((A/(width1-ol1+(cncn*(width2-ol2))))-(A MOD (width1-ol1+cncn*(width2-ol2))+1)

FOR zz = 1 to phor1

	FOR hh=1 to pver1
		gosub "nsp1"
		prism NSP/2, len1,
			get(NSP)
		ADDZ len1+vol1
	NEXT hh
	
	DEL pver1 
	
	ADDX width1-ol1
	
	if cncn = 1 then
		FOR hh2=1 to pver2
			gosub "nsp2"
			prism NSP/2, len2,
				get(NSP)
			ADDZ len2+vol2
		NEXT hh2
		
		DEL pver2
	endif
	
	if cncn > 1 then
	FOR oo = 1 to cncn
		FOR hh2=1 to pver2
			gosub "nsp2"
			prism NSP/2, len2,
				get(NSP)
			ADDZ len2+vol2
		NEXT hh2
		
		DEL pver2
	ADDX width2-ol2
	NEXT oo
	DEL cncn
	endif

ADDX (width1-ol1+((cncn-1)*(width2-ol2)))
NEXT zz


end

"nsp1":

for _iComp = 1 to _nComponents

			for _i = _idxStartPoints[_iComp] to _idxEndPoints[_iComp] step 5

				put _profileGeometryRawData[_i], 
					_profileGeometryRawData[_i + 1]

			next _i

next _iComp

MATERIAL mat1

return


"nsp2":

for _iComp2 = 1 to _nComponents2

			for _i2 = _idxStartPoints2[_iComp2] to _idxEndPoints2[_iComp2] step 5

				put _profileGeometryRawData2[_i2], 
					_profileGeometryRawData2[_i2 + 1]

			next _i2

MATERIAL mat2

next _iComp2

return